package falstad;
/**
 * Class: Wizard
 * 
 * Responsibilities: Drives the this.robot towards the exit given it exists and given the this.robot's energy supply lasts long enough. 
 * @return true if driver successfully reaches the exit
 * @throws exception if this.robot stopped due to some problem, e.g. lack of energy
 * 
 * Collaborators: Robot, Cells, MazeController, BasicRobot, RobotDriver
 * @author cssuh
 */
import java.awt.Color;
import falstad.Robot.Direction;
import falstad.Robot.Turn;
import generation.CardinalDirection;
import generation.Distance;
import generation.Order;

public class Wizard implements RobotDriver{
	
	protected int[][] board;
	protected BasicRobot robot;
	protected Distance distance;
	protected int pathLength;
	protected MazeController mazeController;
	protected CardinalDirection cd;
	
	public Wizard() {
		this.board = null;
		this.robot = null;
		this.distance = null;
		this.pathLength = 0;
		this.mazeController = new MazeController();
	}
	
	public Wizard(Order.Builder builder) {
		this.board = null;
		this.robot = null;
		this.distance = null;
		this.pathLength = 0;
		this.mazeController = new MazeController(builder);
	}

	@Override
	public void setRobot(Robot r) {
		this.robot = (BasicRobot) r;
		this.robot.setMaze(this.mazeController);
	}

	@Override
	public void setDimensions(int width, int height) {
		this.board = new int[width][height];
	}

	@Override
	public void setDistance(Distance distance) {
		this.distance = distance;
	}

	@Override
	public boolean drive2Exit() throws Exception {
		this.robot.maze.mapMode = true;
		this.robot.maze.showSolution = true;
		this.robot.maze.showMaze = !((BasicRobot) this.robot).maze.showMaze;
		this.robot.maze.notifyViewerRedraw();
	
		
		
		while (!this.robot.isAtGoal()){
			if (BasicRobot.batteryLevel != 0){
				if (this.robot.canSeeGoal(Direction.LEFT) || this.robot.canSeeGoal(Direction.FORWARD)
						|| this.robot.canSeeGoal(Direction.RIGHT)){
					if (this.robot.canSeeGoal(Direction.LEFT)){
						if(this.robot.getBatteryLevel() > 5){
							this.robot.rotate(Turn.RIGHT);
							((BasicRobot)this.robot).maze.state = Constants.StateGUI.STATE_FINISH;
							((BasicRobot)this.robot).maze.notifyViewerRedraw();
							this.pathLength = 0;
							return true;
						}
					}
					else if (this.robot.canSeeGoal(Direction.RIGHT)){
						if(this.robot.getBatteryLevel() > 5){
							this.robot.rotate(Turn.LEFT);
							this.robot.maze.state = Constants.StateGUI.STATE_FINISH;
							this.robot.maze.notifyViewerRedraw();
							this.pathLength = 0;
							return true;
						}
					}
					else if(this.robot.canSeeGoal(Direction.FORWARD)){
						if(this.robot.getBatteryLevel() > 5){						
							this.robot.maze.state = Constants.StateGUI.STATE_FINISH;
							this.robot.maze.notifyViewerRedraw();
							this.pathLength = 0;
							return true;
						}
					}
				}
				if ((this.robot.distanceToObstacle(Robot.Direction.FORWARD) == 0) &&
						(this.robot.distanceToObstacle(Robot.Direction.RIGHT) == 0)){
					if (this.robot.getBatteryLevel() < 8){
						break;
					}
					this.robot.rotate(Turn.RIGHT);
					this.robot.move(1, false);
					this.pathLength += 1;
				}
				else if ((this.robot.distanceToObstacle(Robot.Direction.RIGHT) != 0)){
					if (this.robot.getBatteryLevel() < 8){
						break;
					}
					this.robot.rotate(Turn.LEFT);
					this.robot.move(1, false);
					this.pathLength += 1;
				}
				else{
					if (this.robot.getBatteryLevel() < 5){
						break;
					}
					this.robot.move(1, false);
					this.pathLength += 1;
				}
			}
			if (this.robot.isAtGoal()){
				((BasicRobot)this.robot).maze.state = Constants.StateGUI.STATE_FINISH;
				((BasicRobot)this.robot).maze.notifyViewerRedraw();
				this.pathLength = 0;
				return true;
			}
		}
		this.robot.setBatteryLevel(0);
		this.robot.maze.state = Constants.StateGUI.STATE_FINISH;
		this.robot.maze.notifyViewerRedraw();
		this.pathLength = 0;
		return false;
	}

	@Override
	public float getEnergyConsumption() {
		return 2500 - BasicRobot.batteryLevel;
	}

	@Override
	public int getPathLength() {
		return this.pathLength;
	}

}